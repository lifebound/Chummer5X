---
# .github/workflows/auto-tag.yml
# Triggered on push to main, but only if it's not a release commit
# This workflow will automatically bump the version and create a new tag.

name: Auto Versioning & Tagging

on:
  push:
    branches:
      - main

jobs:
  create_new_tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for checkout and for the workflow to operate on contents

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # fetch-depth: 0 is crucial to get the full commit history
          # which is needed to analyze the latest commit message.
          fetch-depth: 0

      - name: Get Last Commit Message
        id: get_commit_message
        run: |
          # Get the last commit message
          COMMIT_MSG=$(git log --format=%B -n 1)
          echo "Last commit message: $COMMIT_MSG"
          # Set an output variable for the commit message
          echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Check if it's a Release Commit
        id: check_release_commit
        run: |
          # Check if the commit message contains 'chore(release):'
          # This prevents the workflow from triggering itself in an infinite loop
          # after pushing a new version.
          if echo "${{ steps.get_commit_message.outputs.commit_msg }}" | grep -q 'chore(release):'; then
            echo "::notice::Skipping auto-tagging as this is a release commit."
            echo "is_release_commit=true" >> $GITHUB_OUTPUT
          else
            echo "is_release_commit=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Get Current Version from Git Tag
        id: get_current_version
        # Only run if it's not a release commit
        if: steps.check_release_commit.outputs.is_release_commit == 'false'
        run: |
          # Get the latest tag, which represents the current version
          # If no tag exists, default to v0.0.0
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          # Remove 'v' prefix if present for the action-bump-semver
          CURRENT_VERSION=${CURRENT_VERSION#v}
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Set Bump Level
        id: set_bump_level
        # Only run if it's not a release commit
        if: steps.check_release_commit.outputs.is_release_commit == 'false'
        run: |
          COMMIT_MSG="${{ steps.get_commit_message.outputs.commit_msg }}"
          BUMP_LEVEL="patch" # Default to a patch bump
          
          # Use conditional logic to determine the bump level based on Conventional Commits
          if echo "$COMMIT_MSG" | grep -q 'BREAKING CHANGE'; then
            BUMP_LEVEL="major"
          elif echo "$COMMIT_MSG" | grep -q 'feat:'; then
            BUMP_LEVEL="minor"
          elif echo "$COMMIT_MSG" | grep -q 'fix:'; then
            BUMP_LEVEL="patch"
          fi

          # Set an output variable that can be used in subsequent steps
          echo "bump_level=$BUMP_LEVEL" >> $GITHUB_OUTPUT
          echo "::notice::Determined bump level: $BUMP_LEVEL"

      - name: Automatic Version Bump
        id: versioning
        # Only run if it's not a release commit and a bump level was determined
        if: steps.check_release_commit.outputs.is_release_commit == 'false' && steps.set_bump_level.outputs.bump_level != ''
        uses: actions-ecosystem/action-bump-semver@v1
        with:
          current_version: ${{ steps.get_current_version.outputs.current_version }}
          level: ${{ steps.set_bump_level.outputs.bump_level }}
          # The action will read the version from pubspec.yaml by default
        
      - name: Get the New Tag
        # Only run if a new version was successfully bumped
        if: steps.check_release_commit.outputs.is_release_commit == 'false' && steps.versioning.outputs.new_version != ''
        run: |
          echo "New version tag created: v${{ steps.versioning.outputs.new_version }}"
          # Set the new version as an output for subsequent steps
          echo "new_version=${{ steps.versioning.outputs.new_version }}" >> $GITHUB_OUTPUT

      - name: Configure Git for Push
        # Only run if a new version was successfully bumped
        if: steps.check_release_commit.outputs.is_release_commit == 'false' && steps.versioning.outputs.new_version != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and Push New Version and Tag
        # Only run if a new version was successfully bumped
        if: steps.check_release_commit.outputs.is_release_commit == 'false' && steps.versioning.outputs.new_version != ''
        uses: actions-js/push@v1
        with:
          github_token: ${{ secrets.GH_TOKEN_FOR_WORKFLOW_TRIGGER }} # <--- CHANGED THIS LINE
          branch: main
          tags: true # This will push the new tag created by action-bump-semver